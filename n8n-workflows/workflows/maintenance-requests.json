{
  "name": "LEO Maintenance Request Processing",
  "nodes": [
    {
      "parameters": {
        "path": "maintenance-request",
        "options": {}
      },
      "id": "maintenance-webhook",
      "name": "Maintenance Request Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "leo-maintenance-request"
    },
    {
      "parameters": {
        "functionCode": "// Maintenance Request Categorization and Prioritization\nconst requestData = items[0].json;\n\n// Define emergency keywords\nconst emergencyKeywords = ['flood', 'fire', 'gas leak', 'no heat', 'no power', 'break-in', 'security', 'emergency'];\nconst urgentKeywords = ['water damage', 'electrical', 'plumbing', 'lock', 'safety', 'urgent'];\nconst standardKeywords = ['appliance', 'cosmetic', 'minor repair', 'non-urgent'];\n\n// Categorize request type\nconst description = (requestData.description || '').toLowerCase();\nlet category = 'general';\nlet priority = 'standard';\n\n// Check for emergency\nif (emergencyKeywords.some(keyword => description.includes(keyword))) {\n  priority = 'emergency';\n  category = 'emergency';\n} else if (urgentKeywords.some(keyword => description.includes(keyword))) {\n  priority = 'urgent';\n} else if (standardKeywords.some(keyword => description.includes(keyword))) {\n  priority = 'standard';\n}\n\n// Determine category based on keywords\nif (description.includes('water') || description.includes('leak') || description.includes('plumb')) {\n  category = 'plumbing';\n} else if (description.includes('electric') || description.includes('power') || description.includes('outlet')) {\n  category = 'electrical';\n} else if (description.includes('heat') || description.includes('air') || description.includes('hvac')) {\n  category = 'hvac';\n} else if (description.includes('appliance') || description.includes('refrigerator') || description.includes('stove')) {\n  category = 'appliance';\n} else if (description.includes('door') || description.includes('window') || description.includes('lock')) {\n  category = 'structural';\n} else if (description.includes('pest') || description.includes('bug') || description.includes('rodent')) {\n  category = 'pest_control';\n}\n\n// Calculate response time based on priority\nlet responseTimeHours;\nswitch (priority) {\n  case 'emergency':\n    responseTimeHours = 2;\n    break;\n  case 'urgent':\n    responseTimeHours = 24;\n    break;\n  default:\n    responseTimeHours = 48;\n}\n\n// Generate ticket ID\nconst ticketId = 'MAINT-' + Date.now() + '-' + Math.random().toString(36).substr(2, 5).toUpperCase();\n\n// Enhanced request data\nconst processedRequest = {\n  ...requestData,\n  ticketId: ticketId,\n  category: category,\n  priority: priority,\n  responseTimeHours: responseTimeHours,\n  expectedResponseBy: new Date(Date.now() + responseTimeHours * 60 * 60 * 1000).toISOString(),\n  status: 'submitted',\n  submittedAt: new Date().toISOString(),\n  source: 'leo-voice-agent',\n  requiresVendor: ['plumbing', 'electrical', 'hvac', 'appliance'].includes(category),\n  estimatedCost: category === 'emergency' ? 'high' : 'standard'\n};\n\nreturn [{ json: processedRequest }];"
      },
      "id": "categorize-request",
      "name": "Categorize & Prioritize",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.priority }}",
              "rightValue": "emergency",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "emergency-check",
      "name": "Emergency Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "fromEmail": "emergency@your-property-management.com",
        "toEmail": "emergency-maintenance@your-property-management.com",
        "subject": "ðŸš¨ EMERGENCY MAINTENANCE: Immediate Response Required",
        "text": "EMERGENCY MAINTENANCE REQUEST\n\nTicket ID: {{ $json.ticketId }}\nPriority: {{ $json.priority.toUpperCase() }}\nCategory: {{ $json.category }}\n\nTenant Information:\n- Name: {{ $json.tenantName }}\n- Unit: {{ $json.unitNumber }}\n- Phone: {{ $json.phoneNumber }}\n- Email: {{ $json.email }}\n\nIssue Description:\n{{ $json.description }}\n\nLocation in Unit: {{ $json.location || 'Not specified' }}\n\nSubmitted: {{ $json.submittedAt }}\nResponse Required By: {{ $json.expectedResponseBy }}\n\nIMPORTANT: This is an emergency request requiring immediate attention within 2 hours.\n\nContact tenant immediately at {{ $json.phoneNumber }}",
        "options": {}
      },
      "id": "emergency-alert",
      "name": "Emergency Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [900, 180],
      "credentials": {
        "smtp": {
          "id": "email-smtp",
          "name": "Email SMTP"
        }
      }
    },
    {
      "parameters": {
        "resource": "Case",
        "operation": "create",
        "properties": {
          "Subject": "Maintenance Request - {{ $json.ticketId }}",
          "Description": "{{ $json.description }}\n\nCategory: {{ $json.category }}\nPriority: {{ $json.priority }}\nLocation: {{ $json.location }}\nTenant: {{ $json.tenantName }}\nUnit: {{ $json.unitNumber }}\nSubmitted via LEO Voice Agent",
          "Status": "New",
          "Priority": "{{ $json.priority === 'emergency' ? 'High' : $json.priority === 'urgent' ? 'Medium' : 'Low' }}",
          "Origin": "Phone",
          "Type": "Maintenance Request",
          "ContactEmail": "{{ $json.email }}",
          "ContactPhone": "{{ $json.phoneNumber }}"
        },
        "options": {}
      },
      "id": "create-work-order",
      "name": "Create Work Order",
      "type": "n8n-nodes-base.salesforce",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "salesforceOAuth2Api": {
          "id": "salesforce-credentials",
          "name": "Salesforce Account"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "maintenance@your-property-management.com",
        "toEmail": "={{ $json.email }}",
        "subject": "Maintenance Request Confirmation - {{ $json.ticketId }}",
        "text": "Dear {{ $json.tenantName }},\n\nWe have received your maintenance request and have assigned ticket number {{ $json.ticketId }}.\n\nRequest Details:\n- Issue: {{ $json.description }}\n- Location: {{ $json.location || 'As described' }}\n- Priority: {{ $json.priority }}\n- Expected response time: {{ $json.responseTimeHours }} hours\n\nWhat happens next:\n{% if $json.priority === 'emergency' %}\n- Emergency maintenance team has been immediately notified\n- You should expect contact within 2 hours\n- If this is life-threatening, please call 911\n{% elseif $json.priority === 'urgent' %}\n- Maintenance team will contact you within 24 hours\n- Work will be scheduled based on availability\n{% else %}\n- Maintenance team will contact you within 48 hours\n- Work will be scheduled at mutual convenience\n{% endif %}\n\nFor updates on your request, you can:\n- Reply to this email\n- Call our maintenance line: (555) 123-HELP\n- Reference your ticket number: {{ $json.ticketId }}\n\nThank you for reporting this issue promptly.\n\nBest regards,\nMaintenance Team",
        "options": {}
      },
      "id": "tenant-confirmation",
      "name": "Tenant Confirmation",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [900, 420]
    },
    {
      "parameters": {
        "functionCode": "// Route to appropriate vendor based on category\nconst requestData = items[0].json;\n\nconst vendorRouting = {\n  'plumbing': {\n    email: 'plumbing-vendor@example.com',\n    phone: '(555) 123-PLUMB',\n    company: 'ABC Plumbing Services'\n  },\n  'electrical': {\n    email: 'electrical-vendor@example.com',\n    phone: '(555) 123-ELECT',\n    company: 'XYZ Electrical'\n  },\n  'hvac': {\n    email: 'hvac-vendor@example.com',\n    phone: '(555) 123-HVAC',\n    company: 'Climate Control Pros'\n  },\n  'appliance': {\n    email: 'appliance-vendor@example.com',\n    phone: '(555) 123-APPL',\n    company: 'Appliance Repair Plus'\n  },\n  'pest_control': {\n    email: 'pest-vendor@example.com',\n    phone: '(555) 123-PEST',\n    company: 'Pest Solutions Inc'\n  }\n};\n\nconst vendor = vendorRouting[requestData.category];\n\nif (vendor && requestData.requiresVendor) {\n  return [{\n    json: {\n      ...requestData,\n      assignedVendor: vendor,\n      vendorNotificationRequired: true\n    }\n  }];\n} else {\n  return [{\n    json: {\n      ...requestData,\n      assignedVendor: null,\n      vendorNotificationRequired: false,\n      internalMaintenance: true\n    }\n  }];\n}"
      },
      "id": "vendor-routing",
      "name": "Vendor Routing",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.vendorNotificationRequired }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "vendor-notification-check",
      "name": "Vendor Notification Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "fromEmail": "dispatch@your-property-management.com",
        "toEmail": "={{ $json.assignedVendor.email }}",
        "subject": "New Maintenance Request - {{ $json.ticketId }} ({{ $json.priority.toUpperCase() }})",
        "text": "{{ $json.assignedVendor.company }},\n\nYou have been assigned a new maintenance request.\n\nTicket Details:\n- Ticket ID: {{ $json.ticketId }}\n- Priority: {{ $json.priority }}\n- Category: {{ $json.category }}\n- Property: {{ $json.propertyAddress }}\n- Unit: {{ $json.unitNumber }}\n\nTenant Contact:\n- Name: {{ $json.tenantName }}\n- Phone: {{ $json.phoneNumber }}\n- Email: {{ $json.email }}\n\nIssue Description:\n{{ $json.description }}\n\nLocation in Unit: {{ $json.location || 'See description' }}\n\nResponse Time Required: {{ $json.responseTimeHours }} hours\nExpected Response By: {{ $json.expectedResponseBy }}\n\nProperty Manager Contact:\n- Phone: (555) 123-4567\n- Email: dispatch@your-property-management.com\n\nPlease confirm receipt of this request and provide estimated arrival time.\n\nThank you,\nProperty Management Team",
        "options": {}
      },
      "id": "vendor-notification",
      "name": "Notify Vendor",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1560, 240],
      "credentials": {
        "smtp": {
          "id": "email-smtp",
          "name": "Email SMTP"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "dispatch@your-property-management.com",
        "toEmail": "internal-maintenance@your-property-management.com",
        "subject": "Internal Maintenance Request - {{ $json.ticketId }}",
        "text": "Internal Maintenance Team,\n\nNew maintenance request assigned to internal team.\n\nTicket ID: {{ $json.ticketId }}\nPriority: {{ $json.priority }}\nCategory: {{ $json.category }}\n\nTenant: {{ $json.tenantName }}\nUnit: {{ $json.unitNumber }}\nPhone: {{ $json.phoneNumber }}\n\nDescription: {{ $json.description }}\nLocation: {{ $json.location }}\n\nResponse required by: {{ $json.expectedResponseBy }}\n\nPlease update the work order system once assigned.",
        "options": {}
      },
      "id": "internal-notification",
      "name": "Internal Maintenance",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1560, 360],
      "credentials": {
        "smtp": {
          "id": "email-smtp",
          "name": "Email SMTP"
        }
      }
    }
  ],
  "connections": {
    "maintenance-webhook": {
      "main": [
        [
          {
            "node": "categorize-request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "categorize-request": {
      "main": [
        [
          {
            "node": "emergency-check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "emergency-check": {
      "main": [
        [
          {
            "node": "emergency-alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "create-work-order",
            "type": "main",
            "index": 0
          },
          {
            "node": "tenant-confirmation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create-work-order",
            "type": "main",
            "index": 0
          },
          {
            "node": "tenant-confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-work-order": {
      "main": [
        [
          {
            "node": "vendor-routing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tenant-confirmation": {
      "main": [
        [
          {
            "node": "vendor-routing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "vendor-routing": {
      "main": [
        [
          {
            "node": "vendor-notification-check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "vendor-notification-check": {
      "main": [
        [
          {
            "node": "vendor-notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "internal-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "id": "leo-maintenance-processing",
  "tags": [
    {
      "id": "maintenance",
      "name": "Maintenance"
    },
    {
      "id": "leo-voice-agent",
      "name": "LEO Voice Agent"
    }
  ]
}